// Code generated by protoc-gen-go. DO NOT EDIT.
// source: max.proto

package maxpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Num                  int64    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd713ec412f37532, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type Response struct {
	Num                  int64    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd713ec412f37532, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "main.Request")
	proto.RegisterType((*Response)(nil), "main.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MaxServiceClient is the client API for MaxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MaxServiceClient interface {
	Max(ctx context.Context, opts ...grpc.CallOption) (MaxService_MaxClient, error)
}

type maxServiceClient struct {
	cc *grpc.ClientConn
}

func NewMaxServiceClient(cc *grpc.ClientConn) MaxServiceClient {
	return &maxServiceClient{cc}
}

func (c *maxServiceClient) Max(ctx context.Context, opts ...grpc.CallOption) (MaxService_MaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MaxService_serviceDesc.Streams[0], "/main.MaxService/Max", opts...)
	if err != nil {
		return nil, err
	}
	x := &maxServiceMaxClient{stream}
	return x, nil
}

type MaxService_MaxClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type maxServiceMaxClient struct {
	grpc.ClientStream
}

func (x *maxServiceMaxClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *maxServiceMaxClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MaxServiceServer is the server API for MaxService service.
type MaxServiceServer interface {
	Max(MaxService_MaxServer) error
}

func RegisterMaxServiceServer(s *grpc.Server, srv MaxServiceServer) {
	s.RegisterService(&_MaxService_serviceDesc, srv)
}

func _MaxService_Max_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MaxServiceServer).Max(&maxServiceMaxServer{stream})
}

type MaxService_MaxServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type maxServiceMaxServer struct {
	grpc.ServerStream
}

func (x *maxServiceMaxServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *maxServiceMaxServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MaxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.MaxService",
	HandlerType: (*MaxServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Max",
			Handler:       _MaxService_Max_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "max.proto",
}

func init() { proto.RegisterFile("max.proto", fileDescriptor_dd713ec412f37532) }

var fileDescriptor_dd713ec412f37532 = []byte{
	// 137 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0x4d, 0xac, 0xd0,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x53, 0x92, 0xe6, 0x62, 0x0f,
	0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe0, 0x62, 0xce, 0x2b, 0xcd, 0x95, 0x60, 0x54,
	0x60, 0xd4, 0x60, 0x0e, 0x02, 0x31, 0x95, 0x64, 0xb8, 0x38, 0x82, 0x52, 0x8b, 0x0b, 0xf2, 0xf3,
	0x8a, 0x53, 0x31, 0x65, 0x8d, 0x2c, 0xb8, 0xb8, 0x7c, 0x13, 0x2b, 0x82, 0x53, 0x8b, 0xca, 0x32,
	0x93, 0x53, 0x85, 0xb4, 0xb8, 0x98, 0x7d, 0x13, 0x2b, 0x84, 0x78, 0xf5, 0x40, 0xc6, 0xea, 0x41,
	0xcd, 0x94, 0xe2, 0x83, 0x71, 0x21, 0xa6, 0x28, 0x31, 0x68, 0x30, 0x1a, 0x30, 0x3a, 0xb1, 0x47,
	0xb1, 0xe6, 0x26, 0x56, 0x14, 0x24, 0x25, 0xb1, 0x81, 0x9d, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0xab, 0xb5, 0x17, 0x83, 0x97, 0x00, 0x00, 0x00,
}
