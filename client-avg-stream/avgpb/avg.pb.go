// Code generated by protoc-gen-go. DO NOT EDIT.
// source: avg.proto

package avgpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AvgRequest struct {
	Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AvgRequest) Reset()         { *m = AvgRequest{} }
func (m *AvgRequest) String() string { return proto.CompactTextString(m) }
func (*AvgRequest) ProtoMessage()    {}
func (*AvgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b889feec73713d05, []int{0}
}

func (m *AvgRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AvgRequest.Unmarshal(m, b)
}
func (m *AvgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AvgRequest.Marshal(b, m, deterministic)
}
func (m *AvgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvgRequest.Merge(m, src)
}
func (m *AvgRequest) XXX_Size() int {
	return xxx_messageInfo_AvgRequest.Size(m)
}
func (m *AvgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AvgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AvgRequest proto.InternalMessageInfo

func (m *AvgRequest) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type AvgResponse struct {
	Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AvgResponse) Reset()         { *m = AvgResponse{} }
func (m *AvgResponse) String() string { return proto.CompactTextString(m) }
func (*AvgResponse) ProtoMessage()    {}
func (*AvgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b889feec73713d05, []int{1}
}

func (m *AvgResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AvgResponse.Unmarshal(m, b)
}
func (m *AvgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AvgResponse.Marshal(b, m, deterministic)
}
func (m *AvgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvgResponse.Merge(m, src)
}
func (m *AvgResponse) XXX_Size() int {
	return xxx_messageInfo_AvgResponse.Size(m)
}
func (m *AvgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AvgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AvgResponse proto.InternalMessageInfo

func (m *AvgResponse) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func init() {
	proto.RegisterType((*AvgRequest)(nil), "main.AvgRequest")
	proto.RegisterType((*AvgResponse)(nil), "main.AvgResponse")
}

func init() { proto.RegisterFile("avg.proto", fileDescriptor_b889feec73713d05) }

var fileDescriptor_b889feec73713d05 = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0x4b, 0xd7,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x53, 0x92, 0xe3, 0xe2, 0x72,
	0x2c, 0x4b, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe0, 0x62, 0xce, 0x2b, 0xcd,
	0x95, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x02, 0x31, 0x95, 0xe4, 0xb9, 0xb8, 0xc1, 0xf2, 0xc5,
	0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x98, 0x0a, 0x8c, 0x6c, 0xc0, 0x06, 0x04, 0xa7, 0x16, 0x95, 0x65,
	0x26, 0xa7, 0x0a, 0xe9, 0x71, 0x31, 0x3b, 0x96, 0xa5, 0x0b, 0x09, 0xe8, 0x81, 0x0c, 0xd7, 0x43,
	0x98, 0x2c, 0x25, 0x88, 0x24, 0x02, 0x31, 0x4b, 0x89, 0x41, 0x83, 0xd1, 0x89, 0x3d, 0x8a, 0x35,
	0xb1, 0x2c, 0xbd, 0x20, 0x29, 0x89, 0x0d, 0xec, 0x28, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x30, 0xee, 0xff, 0x56, 0xa1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AvgServiceClient is the client API for AvgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AvgServiceClient interface {
	Avg(ctx context.Context, opts ...grpc.CallOption) (AvgService_AvgClient, error)
}

type avgServiceClient struct {
	cc *grpc.ClientConn
}

func NewAvgServiceClient(cc *grpc.ClientConn) AvgServiceClient {
	return &avgServiceClient{cc}
}

func (c *avgServiceClient) Avg(ctx context.Context, opts ...grpc.CallOption) (AvgService_AvgClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AvgService_serviceDesc.Streams[0], "/main.AvgService/Avg", opts...)
	if err != nil {
		return nil, err
	}
	x := &avgServiceAvgClient{stream}
	return x, nil
}

type AvgService_AvgClient interface {
	Send(*AvgRequest) error
	CloseAndRecv() (*AvgResponse, error)
	grpc.ClientStream
}

type avgServiceAvgClient struct {
	grpc.ClientStream
}

func (x *avgServiceAvgClient) Send(m *AvgRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *avgServiceAvgClient) CloseAndRecv() (*AvgResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AvgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AvgServiceServer is the server API for AvgService service.
type AvgServiceServer interface {
	Avg(AvgService_AvgServer) error
}

func RegisterAvgServiceServer(s *grpc.Server, srv AvgServiceServer) {
	s.RegisterService(&_AvgService_serviceDesc, srv)
}

func _AvgService_Avg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AvgServiceServer).Avg(&avgServiceAvgServer{stream})
}

type AvgService_AvgServer interface {
	SendAndClose(*AvgResponse) error
	Recv() (*AvgRequest, error)
	grpc.ServerStream
}

type avgServiceAvgServer struct {
	grpc.ServerStream
}

func (x *avgServiceAvgServer) SendAndClose(m *AvgResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *avgServiceAvgServer) Recv() (*AvgRequest, error) {
	m := new(AvgRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AvgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.AvgService",
	HandlerType: (*AvgServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Avg",
			Handler:       _AvgService_Avg_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "avg.proto",
}
